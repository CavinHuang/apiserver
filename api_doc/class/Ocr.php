<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/8/14 0014
 * Time: 上午 11:07
 */



use App\Services\Libs\Youtu\Conf;
use App\Services\Libs\Youtu\YouTu;
use App\Services\Util\Http;
class Ocr {
  
  protected $url = [
    'id_card' => 'http://api.youtu.qq.com/youtu/ocrapi/idcardocr',
    
  ];
  
  protected function _initialiaze () {
  
  }
  
  const EXPIRED_SECONDS = 2592000;
  
  /**
   * 接口基础运行返回控制器数据
   * @author slide
   * @param $params
   * @param $action
   * @return array data 数据
   */
  public function run(&$params, $action) {
    return [
      'status' => true,
      'code'   => '200',
      'data'   => [
        'controller' => 'Wechat',
        'apis' => [
          'getQrcode',
          'LangUrlToShort',
          'get',
          'getAccessToken',
          'getIp',
          'sendTemplate',
          'getUserInfo',
          'previewMsg'
        ]
      ]
    ];
  }
  
  /**
   * 图片ocr识别
   * @method Ocr.ocrTest
   * @desc 腾讯优图ocr图片识别 文档地址http://open.youtu.qq.com/welcome/developer#/api-summary
   * @author slide
   * @return object result 成功返回身份证信息 字段说明 http://open.youtu.qq.com/welcome/developer
   */
  public function ocrTest(){
    $image = $this->getParams('image', 'string');
    $url = $this->getParams('url', 'string');
    $card_type = $this->getParams('card_type', 'int'); // 0正面 1反面
    $type = $this->getParams('type', 'string'); // idcard, namecard,bc, driverlicense, generalocr
    
    $class_rpc = [];
    
    switch (strtolower($type)){
      case 'idcard':
        $class_rpc = [
          'url' => 'idcardocrurl',
          'str' => 'idcardocr'
        ];
        break;
      case 'namecard':
        $class_rpc = [
          'url' => 'namecardocrurl',
          'str' => 'namecardocr'
        ];
        break;
      case 'driverlicense':
        $class_rpc = [
          'url' => 'driverlicenseocr',
          'str' => 'driverlicenseocrurl'
        ];
        break;
      case 'general':
        $class_rpc = [
          'url' => 'generalocr',
          'str' => 'generalocrurl'
        ];
        break;
      case 'bc':
        $class_rpc=[
          'url' => 'bcocrurl',
          'str' => 'bcocr'
        ];
        break;
      default:
        $class_rpc = [
          'url' => 'idcardocrurl',
          'str' => 'idcardocr'
        ];
        break;
    }
    if(!$url && !$image)
      return $this->ajax(404, 'error', '参数不正确');
  
    parent::_initialiaze(); // TODO: Change the autogenerated stub
    $appid='10094298';
    $secretId='AKIDUtYN3dpQYXK2dATrwqcFiATeYLxPHCLJ';
    $secretKey='Xr55vY1YlqiQehgNwLYZ9i5KNEtNflux';
    $userid='943866180';
  
    Conf::setAppInfo($appid, $secretId, $secretKey, $userid,conf::API_YOUTU_END_POINT );
    
    if(isset($url) && $url != ''){
      $uploadRet = YouTu::$class_rpc['url']($url, $card_type);
    } else {
      $uploadRet = YouTu::$class_rpc['str']($image, $card_type);
    }
    
    if(is_string($uploadRet)){
      return $this->ajax(500, 'error', $uploadRet);
    } else{
      $code = isset($uploadRet['errorcode']) ? $uploadRet['errorcode'] : 200;
      $msg = isset($uploadRet['errormsg']) ? $uploadRet['errormsg'] : 'Unkonow';
      return $this->ajax($code, $msg, $msg, $uploadRet);
    }
  }
  
  /**
   * 接口参数
   * @return array
   */
  public static function getRules() {
    return [
      'ocrTest' => [
        'image' => [
          'name'    => 'image',
          'type'    => 'string',
          'min'     => '',
          'require' => true,
          'desc'    => '图片base64字符串'
        ],
        'url' => [
          'name'    => 'url',
          'type'    => 'string',
          'min'     => '',
          'require' => true,
          'desc'    => '图片地址, url和image二选一，同时有时取url'
        ],
        'card_type' => [
          'name'    => 'card_type',
          'type'    => 'int',
          'min'     => '0',
          'require' => true,
          'desc'    => '身份证正面或者反面'
        ],
        'type' => [
          'name'    => 'type',
          'type'    => 'int',
          'min'     => '0',
          'require' => true,
          'desc'    => '需要识别的类型，目前支持idcard（身份证识别）, namecard（名片识别（要求更严））, bc（名片识别[更准]）, driverlicense（驾驶证是被）, generalocr（通用图片文字识别）'
        ],
      ],
      
      'run' => [
      ],
    ];
  }
}
